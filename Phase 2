---
title: "Untitled"
output: 
  flexdashboard::flex_dashboard:
    orientation: rows
    vertical_layout: scroll
    runtime: shiny
    source_code: embed
    theme: cosmo
    storyboard: TRUE
---

```{r setup, include=FALSE}
library(flexdashboard)
library(readxl)
library(tidyverse)
library(lubridate)
library(ggplot2)
library(reshape)
library(shiny)
library(plotly)
```


```{r}
Copy_of_mill_para <- read_excel("D:/Analytics/Freelancing projects/New folder/Copy of mill para.xlsx")
colnames(Copy_of_mill_para) <- gsub("MU 20 PULV A ","",colnames(Copy_of_mill_para))
Copy_of_mill_para <- as.data.frame(Copy_of_mill_para)
colnames(Copy_of_mill_para) <- gsub(" ","_",colnames(Copy_of_mill_para))
names(Copy_of_mill_para) <-  make.names(names(Copy_of_mill_para))
Copy_of_mill_para1 <- melt(Copy_of_mill_para,id=c("Date"))
Copy_of_mill_para1 <- Copy_of_mill_para1 %>%
   mutate(Date = ymd_hms(Date),
          Year = year(Date),
          Month = format(Date, "%b"),
          Day = format(Date, "%a"),
          DateDay = day(Date),
          Hour = format(Date, "%H"),
          Min =  format(Date, "%M"),
          Sec =  format(Date, "%S"))
#Copy_of_mill_para1 <- Copy_of_mill_para1 %>% mutate(Date = as.POSIXct(Date,format = '%d-%m-%Y %H:%M:%S'))
Copy_of_mill_para1 <- Copy_of_mill_para1 %>% mutate(onlyDate = as.Date(Date))
Copy_of_mill_para <- Copy_of_mill_para %>% mutate(onlyDate = as.Date(Date))
Copy_of_mill_para <- Copy_of_mill_para %>%
   mutate(Date = ymd_hms(Date),
          Year = year(Date),
          Month = format(Date, "%b"),
          Day = format(Date, "%a"),
          DateDay = day(Date),
          Hour = format(Date, "%H"),
          Min =  format(Date, "%M"),
          Sec =  format(Date, "%S"))

mean_value <- as.data.frame(tapply(Copy_of_mill_para1$value,Copy_of_mill_para1$variable,mean))
sd_value <- as.data.frame(tapply(Copy_of_mill_para1$value,Copy_of_mill_para1$variable,sd))
sd_value$varible <- rownames(sd_value)
mean_value$varible <- rownames(mean_value)
rownames(sd_value) <- NULL
rownames(mean_value) <- NULL
colnames(sd_value) <- c("sd","variable")
colnames(mean_value) <- c("mean","variable")
mean_sd <- mean_value
mean_sd$sd <- sd_value$sd[match(mean_sd$variable,sd_value$variable)]
mean_sd$Out <- mean_sd$mean + 3 * mean_sd$sd
mean_sd$In <- mean_sd$mean - 3 * mean_sd$sd
Copy_of_mill_para1$Out <- mean_sd$Out[match(Copy_of_mill_para1$variable,mean_sd$variable)]
Copy_of_mill_para1$In <- mean_sd$In[match(Copy_of_mill_para1$variable,mean_sd$variable)]
Copy_of_mill_para1$label <- ifelse(Copy_of_mill_para1$value > Copy_of_mill_para1$Out | Copy_of_mill_para1$value < Copy_of_mill_para1$In,"Outlier","Normal") 
highlight_df <- Copy_of_mill_para1 %>% filter(label == "Outlier")
```

Summary
=================

Inputs {.sidebar}
-----------------------------------------------------------------------
```{r}
    selectInput("Plot1","Filter1",choices = c("","Trend","Correlation"))
    output$filter_2 <- renderUI({
    if (input$Plot1 == "") {
    return()
    } else if (input$Plot1 == "Trend") {
      label = "Trend"
      selectInput("b",label,choices = c("All",levels(factor(Copy_of_mill_para1$variable))),selected = "All",multiple = TRUE)
    } else {
      label = "First Variable"
      selectInput("b",
                label,
                choices = c(levels(factor(Copy_of_mill_para1$variable))))
    }
    })
    output$filter_3 <- renderUI({
      if (input$Plot1 == "Trend" | input$Plot1 == "") {
        return()
      } else {
        selectInput("a",
                "Second Variable",
                choices = c(levels(factor(Copy_of_mill_para1$variable))))
      }
    })
uiOutput("filter_2")
uiOutput("filter_3")
uiOutput("filter_4")
     output$filter_4 <- renderUI({
       if(input$Plot1 == "Trend"){
         dateRangeInput("s2","Date",min = min(Copy_of_mill_para1$onlyDate),max = max(Copy_of_mill_para1$onlyDate),start = min(Copy_of_mill_para1$onlyDate),end = max(Copy_of_mill_para1$onlyDate))
       } else if(input$Plot1 == "Correlation"){
         dateRangeInput("s3","Date",min = min(Copy_of_mill_para$onlyDate),max = max(Copy_of_mill_para$onlyDate),start = min(Copy_of_mill_para$onlyDate),end = max(Copy_of_mill_para$onlyDate))
       }
     })
radioButtons("r",h5("Highlight Anomalies"),choices = list("No", "Yes"),selected = "No", inline = T)
```


Column {data-width=350}
-----------------------------------------------------------------------


### Chart A

```{r}
output$g1 <- renderPlotly({
    req(input$Plot1)
    if (input$Plot1 == "Trend") {
        plot_data <- Copy_of_mill_para1
    }
    if (input$Plot1 == "Trend" & input$b != "All") {
        plot_data <- plot_data %>% filter(variable %in% input$b)
    } 
    if (input$Plot1 == "Trend" & !is.null(input$s2)) {
        plot_data <- plot_data %>% filter(onlyDate %in% input$s2[1]:input$s2[2])
    } 
    if (input$Plot1 == "Correlation"){
        plot_data1 <- Copy_of_mill_para
    }
    if (input$Plot1 == "Correlation" & !is.null(input$s3)){
        plot_data1 <- plot_data1 %>% filter(onlyDate %in% input$s3[1]:input$s3[2])
    }
    
    if (input$Plot1 == "Trend") {
        ggplotly(ggplot(plot_data, aes(x = Date, y = value, color = variable)) +
            geom_line(size =  .2)+theme(legend.position = "none")+geom_point(data = highlight_df,aes(x=Date, y = value),color='red',size=1)) %>% layout(dragmode = "select")
    } else if (input$Plot1 == "Correlation") {
        req(input$a)
        req(input$b)
        ggplotly(ggplot(plot_data1, aes_string(x = input$b, y = input$a)) +
            geom_point(size =  .2))%>% layout(dragmode = "select")
    }
})

plotlyOutput("g1")
```

Column {data-width=350}
-----------------------------------------------------------------------

### Parameters

```{r}
verbatimTextOutput("brush")
output$brush <- renderPrint({
    d <- event_data("plotly_selected")
    if (is.null(d)) "Click and drag events (i.e., select/lasso) appear here (double-click to clear)" else d
  })

```

### Chart B

```{r}
plotlyOutput("g2")
output$g2 <- renderPlotly({
    req(input$Plot1)
    if (input$Plot1 == "Trend") {
        plot_data3 <- Copy_of_mill_para1
    }
    if (input$Plot1 == "Trend" & input$b != "All") {
        plot_data3 <- plot_data3 %>% filter(variable %in% input$b)
    } 
    if (input$Plot1 == "Trend" & !is.null(input$s2)) {
        plot_data3 <- plot_data3 %>% filter(onlyDate %in% input$s2[1]:input$s2[2])
    } 
    if (input$Plot1 == "Correlation"){
        plot_data4 <- Copy_of_mill_para1
    }
    if (input$Plot1 == "Trend" & !is.null(input$b) & !is.null(input$a) != "All") {
        plot_data4 <- plot_data4 %>% filter(variable %in% input$b)
    }
    if (input$Plot1 == "Correlation" & !is.null(input$s3)){
        plot_data4 <- plot_data4 %>% filter(onlyDate %in% input$s3[1]:input$s3[2])
    }
    if (input$Plot1 == "Trend") {
        ggplotly(ggplot(plot_data3)+geom_boxplot(aes(x=variable,y=value,color=variable))+theme(legend.position =   "none")+theme(axis.text.x = element_text(angle = 90,hjust = 1,size = 6)))
    } else if (input$Plot1 == "Correlation") {
        req(input$a)
        req(input$b)
        ggplot(data = filter(plot_data4, variable == input$b | variable == input$a)) + geom_boxplot(aes(x = variable, y = value))
    }
})
```

