---
title: "Untitled"
runtime: shiny
output: 
  flexdashboard::flex_dashboard:
    orientation: rows
    vertical_layout: scroll
    theme: cosmo
---

```{r setup, include=FALSE}
library(flexdashboard)
library(readxl)
library(tidyverse)
library(lubridate)
library(ggplot2)
library(reshape)
library(shiny)
library(plotly)
library(ggcorrplot)
library(psych)
library(tidyr)
library(corrplot)
library(rhandsontable)
library(knitr)
library(kableExtra)
library(RGraphics)
library(grid)
library(gridExtra) 
```


```{r}
Copy_of_mill_para <- read_excel("Copy of mill para.xlsx")
Performance1 <- read_excel("Performance.xlsx")
Performance1 <- as.data.frame(Performance1)
Past_Maintainence <- read_excel("Past Maintainence.xlsx")
Past_Maintainence <- as.data.frame(Past_Maintainence)
colnames(Copy_of_mill_para) <- gsub("MU 20 PULV A ","",colnames(Copy_of_mill_para))
Copy_of_mill_para <- as.data.frame(Copy_of_mill_para)
colnames(Copy_of_mill_para) <- gsub(" ","_",colnames(Copy_of_mill_para))
names(Copy_of_mill_para) <-  make.names(names(Copy_of_mill_para))
Copy_of_mill_para1 <- melt(Copy_of_mill_para,id=c("Date"))
Copy_of_mill_para1 <- Copy_of_mill_para1 %>%
   mutate(Date = ymd_hms(Date),
          Year = year(Date),
          Month = format(Date, "%b"),
          Day = format(Date, "%a"),
          DateDay = day(Date),
          Hour = format(Date, "%H"),
          Min =  format(Date, "%M"),
          Sec =  format(Date, "%S"))
#Copy_of_mill_para1 <- Copy_of_mill_para1 %>% mutate(Date = as.POSIXct(Date,format = '%d-%m-%Y %H:%M:%S'))
Copy_of_mill_para1 <- Copy_of_mill_para1 %>% mutate(onlyDate = as.Date(Date))
Copy_of_mill_para <- Copy_of_mill_para %>% mutate(onlyDate = as.Date(Date))
Copy_of_mill_para <- Copy_of_mill_para %>%
   mutate(Date = ymd_hms(Date),
          Year = year(Date),
          Month = format(Date, "%b"),
          Day = format(Date, "%a"),
          DateDay = day(Date),
          Hour = format(Date, "%H"),
          Min =  format(Date, "%M"),
          Sec =  format(Date, "%S"))

#highlight_df <- Copy_of_mill_para1 %>% filter(label == "Outlier")
Copy_of_mill_para$Hour <- as.numeric(Copy_of_mill_para$Hour)
Copy_of_mill_para1$Hour <- as.numeric(Copy_of_mill_para1$Hour)
Copy_of_mill_para$Min <- as.numeric(Copy_of_mill_para$Min)
Copy_of_mill_para1$Min <- as.numeric(Copy_of_mill_para1$Min)
Des <- describe.by(Copy_of_mill_para, Copy_of_mill_para$onlyDate,na.rm=TRUE)
Des1 <- do.call("rbind",Des)
Des1$Col <- rownames(Des1)
rownames(Des1) <- NULL
Des1 <- Des1 %>% separate(Col, c("Date","Parameters"),sep = "\\.",extra = "merge",remove = FALSE)
Des1$Col <- NULL
Des1$Date <- as.Date(Des1$Date)
Des1 <- Des1[complete.cases(Des1), ]
Des1 <- Des1[Des1$Parameters != "Hour" & Des1$Parameters != "Min",]
#Copy_of_mill_para1$mean <- mean_sd$mean[match(Copy_of_mill_para1$variable,mean_sd$variable)]
#Copy_of_mill_para1$sd <- mean_sd$sd[match(Copy_of_mill_para1$variable,mean_sd$variable)]
Copy_of_mill_para$Train_Test <- rep(x=c("Training set","Test set"),times = c(floor(x=0.8*nrow(x = Copy_of_mill_para)),ceiling(x=0.2*nrow(x=Copy_of_mill_para))))
#dt <- mtcars[1:5, 1:6]
Power_plant_performance_calculation_vinay <- read_excel("Power_plant_performance_calculation_vinay.xls", 
                                                        sheet = "FW HEATERS", range = "B2:E164", 
                                                        col_types = c("text", "text", "numeric", 
                                                                      "numeric"))
Perf <- Power_plant_performance_calculation_vinay
Perf <- as.data.frame(Perf)
Perf <- Perf[complete.cases(Perf),]
names(Perf)[4] <- format(as.Date(as.numeric(names(Perf)[4]),origin = '1899-12-30'))
#Perf <- Perf %>% mutate(Design = round(Design,2))
Perf <- Perf %>% mutate_at(vars(Design,"2019-10-21"),funs(round(.,1)))
```

Summary
=================

Inputs {.sidebar}
-----------------------------------------------------------------------
```{r}
    selectInput("Mill1","Mill",choices = c("All","Mill-A","Mill-B","Mill-C","Mill-D","Mill-E"),selected = "All",multiple = TRUE)
    selectInput("Plot1","Filter1",choices = c("","Trend","Correlation"))
    output$filter_2 <- renderUI({
    if (input$Plot1 == "") {
    return()
    } else if (input$Plot1 == "Trend") {
      label = "Trend"
      selectInput("b",label,choices = c("All",levels(factor(Copy_of_mill_para1$variable))),selected = "All",multiple = TRUE)
    } else {
      label = "First Variable"
      selectInput("b",
                label,
                choices = c("All",levels(factor(Copy_of_mill_para1$variable))),selected = "All")
    }
    })
    output$filter_3 <- renderUI({
      if (input$Plot1 == "Trend" | input$Plot1 == "") {
        return()
      } else {
        selectInput("a",
                "Second Variable",
                choices = c("All",levels(factor(Copy_of_mill_para1$variable))),selected = "All")
      }
    })
uiOutput("filter_2")
uiOutput("filter_3")
uiOutput("filter_4")
     output$filter_4 <- renderUI({
       if(input$Plot1 == "Trend"){
         dateRangeInput("s2","Date",min = min(Copy_of_mill_para1$onlyDate),max = max(Copy_of_mill_para1$onlyDate),start = min(Copy_of_mill_para1$onlyDate),end = max(Copy_of_mill_para1$onlyDate))
       } else if(input$Plot1 == "Correlation"){
         dateRangeInput("s3","Date",min = min(Copy_of_mill_para$onlyDate),max = max(Copy_of_mill_para$onlyDate),start = min(Copy_of_mill_para$onlyDate),end = max(Copy_of_mill_para$onlyDate))
       }
     })
output$filter_5 <- renderUI({
  if (input$Plot1 == "Trend") {
    sliderInput("h1","Hours",min = min(Copy_of_mill_para1$Hour),max = max(Copy_of_mill_para1$Hour),value = c(min(Copy_of_mill_para1$Hour),max(Copy_of_mill_para1$Hour)))
  } else if (input$Plot1 == "Correlation"){
    sliderInput("h2","Hours",min = min(Copy_of_mill_para$Hour),max = max(Copy_of_mill_para$Hour),value = c(min(Copy_of_mill_para$Hour),max(Copy_of_mill_para$Hour)))
  }
})
output$filter_6 <- renderUI({
  if (input$Plot1 == "Trend") {
    sliderInput("m1","Mins",min = min(Copy_of_mill_para1$Min),max = max(Copy_of_mill_para1$Min),value = c(min(Copy_of_mill_para1$Min),max(Copy_of_mill_para1$Min)),step = 5)
  } else if (input$Plot1 == "Correlation"){
    sliderInput("m2","Mins",min = min(Copy_of_mill_para$Min),max = max(Copy_of_mill_para$Min),value = c(min(Copy_of_mill_para$Min),max(Copy_of_mill_para$Min)),step = 5)
  }
})
uiOutput("filter_5")
uiOutput("filter_6")
output$filter_7 <- renderUI({
  if (input$Plot1 == "Trend"){
  radioButtons("r",h5("Highlight Anomalies"),choices = list("No", "Yes"),selected = "No", inline = T)  }
  else if (input$Plot1 == "Correlation"){
    radioButtons("r",h5("Highlight Anomalies"),choices = c("NA"),selected = "NA")}
})
uiOutput("filter_7")
```


Column {data-width=300}
-----------------------------------------------------------------------

### Chart A

```{r}
output$g1 <- renderPlotly({
    req(input$Plot1)
    req(input$r)
    if (input$Plot1 == "Trend" && (input$r == "No" | input$r == "Yes")) {
        plot_data <- Copy_of_mill_para1
    }
    if (input$Plot1 == "Trend" && (input$r == "No" | input$r == "Yes") && input$b != "All") {
        plot_data <- plot_data %>% filter(variable %in% input$b)
    } 
    if (input$Plot1 == "Trend" && (input$r == "No" | input$r == "Yes") && !is.null(input$s2)) {
        plot_data <- plot_data %>% filter(onlyDate %in% input$s2[1]:input$s2[2])
    } 
    if (input$Plot1 == "Trend" && (input$r == "No" | input$r == "Yes") && !is.null(input$h1)) {
        plot_data <- plot_data %>% filter(Hour %in% input$h1[1]:input$h1[2])
    }
    if (input$Plot1 == "Trend" && (input$r == "No" | input$r == "Yes") && !is.null(input$m1)) {
        plot_data <- plot_data %>% filter(Min %in% input$m1[1]:input$m1[2])
    } 
    if (input$Plot1 == "Correlation"){
        plot_data1 <- Copy_of_mill_para
    }
    if (input$Plot1 == "Correlation" && !is.null(input$s3)){
        plot_data1 <- plot_data1 %>% filter(onlyDate %in% input$s3[1]:input$s3[2])
    }
    if (input$Plot1 == "Correlation" && !is.null(input$h2)){
        plot_data1 <- plot_data1 %>% filter(Hour %in% input$h2[1]:input$h2[2])
    }
    if (input$Plot1 == "Correlation" && !is.null(input$m2)){
        plot_data1 <- plot_data1 %>% filter(Min %in% input$m2[1]:input$m2[2])
    }
    if (input$Plot1 == "Trend" && input$r != "Yes") {
        req(input$r)
        plot_data <- plot_data %>% group_by(variable) %>% mutate(mean = mean(value),sd = sd(value))
        plot_data$scaled_value <- (plot_data$value - plot_data$mean)/plot_data$sd
        
        ggplotly(ggplot(plot_data, aes(x = Date, y = scaled_value, color = variable ,hoverinfo = value )) + geom_line(size =  .2)+theme(legend.position = "none"))
        
    }   else if (input$Plot1 == "Trend" && input$r == "Yes") {
        req(input$r)
        plot_data <- plot_data %>% group_by(variable) %>% mutate(mean = mean(value),sd = sd(value))
        plot_data$scaled_value <- (plot_data$value - plot_data$mean)/plot_data$sd
        plot_data$label1 <- ifelse(plot_data$scaled_value > 3 | plot_data$scaled_value < -3,"Outlier","Normal")
        
        ggplotly(ggplot(plot_data, aes(x = Date, y = scaled_value, color = variable,hoverinfo = value)) +
            geom_line(size =  .2)+theme(legend.position = "none")+geom_point(data = plot_data %>% filter(label1 == "Outlier"),aes(x=Date, y = scaled_value),color='red',size=1))
        
    }
  else if (input$Plot1 == "Correlation" && input$r == "NA"){
        req(input$a)
        req(input$b)
        ggplotly(ggplot(plot_data1, aes_string(x = input$b, y = input$a, color = "Day")) +
            geom_point(size =  .2)+ annotate("text",x=(mean(plot_data1[[input$b]])-5),y=(max(plot_data1[[input$a]])),label = paste("Ratio of ",input$b,"&", input$a,round(mean(plot_data1[[input$b]])/mean(plot_data1[[input$a]]),2))))
  }
})
plotlyOutput("g1")
```

Row {.tabset .tabset-fade}
-----------------------------------------------------------------------

### Performance {data-width=10}

```{r}
t1 <- tableGrob(Past_Maintainence,theme = ttheme_default(base_size = 8))
g1 <- ggplot(data = Performance1,aes(x=Mills,y=Performance, fill=Performance))+geom_bar(stat = "identity",width = 0.5)+theme(plot.margin = unit(c(1,1,1,1),"cm"))+theme(axis.title.x = element_blank())+theme(axis.title.y = element_blank())+theme(legend.position = "none")+theme(axis.text.x = element_text(angle = 0,vjust = 1,size = 5))+theme(axis.text.y = element_text(angle = 0,vjust = 1,size = 5))
grid_layout <- rbind(c(1, 2))
group1 <- grid.arrange(t1,g1,
                       layout_matrix = grid_layout,
                       heights= c(1,1))
grid.draw(group1)
```

### Performance Tables {data-width=500}

```{r}
output$tableset <- renderText({kable(Perf, caption = "FW HEATERS") %>%
  kable_styling("striped", full_width = F) %>%
  pack_rows("For Feed Flow", 8, 10, label_row_css = "background-color: #666; color: #fff;") %>% pack_rows("HPH-8", 11, 28) %>% pack_rows("HPH-7", 29, 46) %>% pack_rows("HPH-6", 47, 64) %>% pack_rows("HPH-5 (Derator)", 65, 81) %>% pack_rows("LPH-4", 82, 99) %>% pack_rows("LPH-3", 100, 117)%>% pack_rows("LPH-2", 118, 135) %>% pack_rows("LPH-1", 136, 153) %>%scroll_box(width = "500px", height = "200px")})
output$tableset1 <- renderText({kable(Perf, caption = "FW HEATERS") %>%
  kable_styling("striped", full_width = F) %>%
  pack_rows("For Feed Flow", 8, 10, label_row_css = "background-color: #666; color: #fff;") %>% pack_rows("HPH-8", 11, 28) %>% pack_rows("HPH-7", 29, 46) %>% pack_rows("HPH-6", 47, 64) %>% pack_rows("HPH-5 (Derator)", 65, 81) %>% pack_rows("LPH-4", 82, 99) %>% pack_rows("LPH-3", 100, 117)%>% pack_rows("LPH-2", 118, 135) %>% pack_rows("LPH-1", 136, 153) %>%scroll_box(width = "500px", height = "200px")})
output$tableset2 <- renderText({kable(Perf, caption = "FW HEATERS") %>%
  kable_styling("striped", full_width = F) %>%
  pack_rows("For Feed Flow", 8, 10, label_row_css = "background-color: #666; color: #fff;") %>% pack_rows("HPH-8", 11, 28) %>% pack_rows("HPH-7", 29, 46) %>% pack_rows("HPH-6", 47, 64) %>% pack_rows("HPH-5 (Derator)", 65, 81) %>% pack_rows("LPH-4", 82, 99) %>% pack_rows("LPH-3", 100, 117)%>% pack_rows("LPH-2", 118, 135) %>% pack_rows("LPH-1", 136, 153) %>%scroll_box(width = "500px", height = "500px")})
output$tableset3 <- renderText({kable(Perf, caption = "FW HEATERS") %>%
  kable_styling("striped", full_width = F) %>%
  pack_rows("For Feed Flow", 8, 10, label_row_css = "background-color: #666; color: #fff;") %>% pack_rows("HPH-8", 11, 28) %>% pack_rows("HPH-7", 29, 46) %>% pack_rows("HPH-6", 47, 64) %>% pack_rows("HPH-5 (Derator)", 65, 81) %>% pack_rows("LPH-4", 82, 99) %>% pack_rows("LPH-3", 100, 117)%>% pack_rows("LPH-2", 118, 135) %>% pack_rows("LPH-1", 136, 153) %>%scroll_box(width = "500px", height = "500px")})
fluidRow(
    column(width = 6, htmlOutput("tableset")),
    column(width = 6, htmlOutput("tableset1")))
```


### Parameters {data-height=1000}

```{r}
output$table1 <- renderRHandsontable({
    req(input$Plot1)
    req(input$r)
    if (input$Plot1 == "Trend" && (input$r == "No" | input$r == "Yes")) {
        plot_data <- Copy_of_mill_para1
    }
    if (input$Plot1 == "Trend" && (input$r == "No" | input$r == "Yes") && input$b != "All") {
        plot_data <- plot_data %>% filter(variable %in% input$b)
    } 
    if (input$Plot1 == "Trend" && (input$r == "No" | input$r == "Yes") && !is.null(input$s2)) {
        plot_data <- plot_data %>% filter(onlyDate %in% input$s2[1]:input$s2[2])
    } 
    if (input$Plot1 == "Trend" && (input$r == "No" | input$r == "Yes") && !is.null(input$h1)) {
        plot_data <- plot_data %>% filter(Hour %in% input$h1[1]:input$h1[2])
    }
    if (input$Plot1 == "Trend" && (input$r == "No" | input$r == "Yes") && !is.null(input$m1)) {
        plot_data <- plot_data %>% filter(Min %in% input$m1[1]:input$m1[2])
    } 
    if (input$Plot1 == "Trend" ) {
        req(input$r)
        plot_data <- plot_data %>% group_by(variable) %>% mutate(mean = mean(value),sd = sd(value))
        plot_data$scaled_value <- (plot_data$value - plot_data$mean)/plot_data$sd
        plot_data$label1 <- ifelse(plot_data$scaled_value > 3 | plot_data$scaled_value < -3,"Outlier","Normal")
 
        summary_table <- plot_data %>% group_by(variable) %>% summarise(Total_points = n(),Std = round(sd(value),2),Mean = round(mean(value),2),Max = round(max(value),2),Min = round(min(value),2),Max_value_points = paste(n_distinct(onlyDate[which(value == max(value))]),collapse = ","),Min_value_points = paste(n_distinct(onlyDate[which(value == min(value))]),collapse = ","),Total_Outliers = sum(label1 == "Outlier"))
        rhandsontable(summary_table)
    } 
  })
output$t10 <- renderPlot({
    req(input$Plot1)
    req(input$r)
    if (input$Plot1 == "Correlation"){
        plot_data1 <- Copy_of_mill_para
    }
    if (input$Plot1 == "Correlation" && !is.null(input$s3)){
        plot_data1 <- plot_data1 %>% filter(onlyDate %in% input$s3[1]:input$s3[2])
    }
    if (input$Plot1 == "Correlation" && !is.null(input$h2)){
        plot_data1 <- plot_data1 %>% filter(Hour %in% input$h2[1]:input$h2[2])
    }
    if (input$Plot1 == "Correlation" && !is.null(input$m2)){
        plot_data1 <- plot_data1 %>% filter(Min %in% input$m2[1]:input$m2[2])
    }
    if (input$Plot1 == "Correlation" && input$r == "NA"){
    corrplot(cor(plot_data1[2:21],), type = "upper", tl.pos = "td",method = "number", tl.cex = 0.8, tl.col = 'black',order = "hclust", diag = FALSE,number.cex=0.9)
    }
})
output$filter_70 <- renderUI(
  if (input$Plot1 == "Trend") {
  rHandsontableOutput("table1")
} else if (input$Plot1 == "Correlation") {
  plotOutput("t10",width = 1000,height = 1000)
}
)
uiOutput("filter_70")
```

Forecasting
=================

Inputs {.sidebar}
-----------------------------------------------------------------------
  
```{r}
selectInput("Con",h5("Consistency Check"),choices = c("","Check"))
radioButtons("cb",h5("Measures"),choices = names(Des1)[3:4],selected = "mean")
```


Column {data-height=1000}
-----------------------------------------------------------------------

### Chart A

```{r}
plotOutput("g10")
output$g10 <- renderPlot({
  if (input$Con == "Check") {
    req(input$cb)
    req(Des1)
    ggplot(data = Des1,aes_string(x="Date",y=input$cb,color = "Parameters"))+geom_point()+facet_wrap("Parameters",ncol = 4, nrow = 6, scales = "free")+theme(legend.position = "none")
  }
})

```
